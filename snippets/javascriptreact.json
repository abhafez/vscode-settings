{
  // Hooks
  "useState": {
    "prefix": [
      "ush",
      "usest",
      "sth"
    ],
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"
    ],
    "description": "React useState() hook"
  },
  "use intl": {
    "prefix": [
      "uintl",
      "useintl"
    ],
    "body": [
      "const { locale, messages } = useIntl();"
    ],
    "description": "Destructure locale and messages from useIntl"
  },
  "use intl messages": {
    "prefix": [
      "uintl",
      "useintl"
    ],
    "body": [
      "const { messages } = useIntl();"
    ],
    "description": "Import react Intl"
  },
  "use intl locale": {
    "prefix": [
      "uintl",
      "useintl"
    ],
    "body": [
      "const { locale } = useIntl();"
    ],
    "description": "Import react Intl"
  },
  "prev state": {
    "prefix": "prev",
    "body": [
      "const prev${1/(.*)/${1:/capitalize}/}Ref = useRef();",
      "useEffect(() => {",
      "\tprev${1/(.*)/${1:/capitalize}/}Ref.current = $1;",
      "});",
      "const prev$1 = prev${1:/capitalize}/}Ref.current;"
    ]
  },
  "useEffect with cleanup": {
    "prefix": [
      "ueh",
      "useeffect"
    ],
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn cleanUp = () => {",
      "\t\t$2",
      "\t}",
      "}, [${3}]);$0"
    ],
    "description": "React useEffect() hook"
  },
  "useEffect once component mounts": {
    "prefix": [
      "ueh",
      "useeffect",
      "cdm"
    ],
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, []);$0"
    ],
    "description": "React useEffect(() => {}, [Observe]) hook"
  },
  "useContext": {
    "prefix": [
      "uch",
      "usecontext"
    ],
    "body": [
      "const $2 = useContext($1);$0"
    ],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucbh",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ");$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "umh",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);$0"
    ],
    "description": "React useMemo() hook"
  },
  "useRef": {
    "prefix": "urh",
    "body": [
      "const $1 = useRef($2)$0"
    ],
    "description": "React useRef() hook"
  },
  "useReducer": {
    "prefix": "urdh",
    "body": [
      "const [${1:state},${2: dispatch}] = useReducer(state, action);",
      "\n\treturn (",
      "\t\t",
      "\t);"
    ],
    "description": "React useReducer() hook"
  },
  "import react-redux hooks": {
    "prefix": "irrh",
    "body": [
      "import { useSelector, useDispatch } from \"react-redux\";"
    ]
  },
  "import react router dom": {
    "prefix": "rrd",
    "body": [
      "import { ${1} } from \"react-router-dom\";"
    ]
  },
  "useSelector": {
    "prefix": "uss",
    "body": [
      "const $1 = useSelector(state => $2);"
    ]
  },
  "useDispatchFunction": {
    "prefix": "usdf",
    "body": [
      "const dispatch = useDispatch();"
    ]
  },
  "useDispatch": {
    "prefix": "usd",
    "body": [
      "const $1 = $2 => dispatch($3);"
    ]
  },
  "useEffect": {
    "prefix": [
      "ueh",
      "useeffect"
    ],
    "body": [
      "useEffect(() => {",
      "\t$2",
      "}, [${1}]);$0"
    ],
    "description": "React useEffect(() => {}, [Observe]) hook"
  },
  // class based components
  "componentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": [
      "componentWillReceiveProps(nextProps) {",
      "\t$0",
      "}",
      ""
    ],
    "description": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(nextProps, nextState) {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": [
      "componentWillUpdate(nextProps, nextState) {",
      "\t$0",
      "}",
      ""
    ],
    "description": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": [
      "componentDidUpdate(prevProps, prevState) {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Invoked immediately after the component\"s updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": [
      "componentWillUnmount() {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from \"react\"",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactClassExportComponent": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from \"react\"",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from \"react\"",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "reactArrowFunctionExportComponent": {
    "prefix": "rafce",
    "body": [
      "import React from \"react\"",
      "import PropTypes from \"prop-types\"",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "\t",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "reactArrowFunctionComponent": {
    "prefix": "rafc",
    "body": [
      "import React from \"react\"",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "reactArrowFunctionComponentWithPropTypes": {
    "prefix": "rafcp",
    "body": [
      "import React from \"react\"",
      "import PropTypes from \"prop-types\"",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system with PropTypes"
  },
  "reactClassExportComponentWithPropTypes": {
    "prefix": "rcep",
    "body": [
      "import React, { Component } from \"react\"",
      "import PropTypes from \"prop-types\"",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactClassPureComponent": {
    "prefix": "rpc",
    "body": [
      "import React, { PureComponent } from \"react\"",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React pure component class with ES7 module system"
  },
  "reactClassExportPureComponent": {
    "prefix": "rpce",
    "body": [
      "import React, { PureComponent } from \"react\"",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:$TM_FILENAME_BASE}",
      ""
    ],
    "description": "Creates a React pure component class with ES7 module system export"
  },
  "reactClassPureComponentWithPropTypes": {
    "prefix": "rpcp",
    "body": [
      "import React, { PureComponent } from \"react\"",
      "import PropTypes from \"prop-types\"",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\tstatic propTypes = {",
      "",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactFunctionMemoComponent": {
    "prefix": "rmc",
    "body": [
      "import React, { memo } from \"react\"",
      "",
      "export default memo(function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "})",
      ""
    ],
    "description": "Creates a React Memo Function Component with ES7 module system"
  },
  "reactFunctionMemoComponentWithPropTypes": {
    "prefix": "rmcp",
    "body": [
      "import React, { memo } from \"react\"",
      "import PropTypes from \"prop-types\"",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(function ${1:${TM_FILENAME_BASE}}(props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Memo Function Component with ES7 module system with PropTypes"
  },
  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": [
      "import React, { Component } from \"react\"",
      "import PropTypes from \"prop-types\"",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with PropTypes and ES7 module system"
  },
  "reactClassCompomentRedux": {
    "prefix": "rcredux",
    "body": [
      "import React, { Component } from \"react\"",
      "import { connect } from \"react-redux\"",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React component class with connected redux and ES7 module system"
  },
  "reactClassCompomentReduxPropTypes": {
    "prefix": "rcreduxp",
    "body": [
      "import React, { Component } from \"react\"",
      "import PropTypes from \"prop-types\"",
      "import { connect } from \"react-redux\"",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
  },
  "mappingToProps": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({",
      "\t${1}",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      ""
    ]
  },
  "classConstructor": {
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "\tsuper(props)",
      "",
      "\tthis.state = {",
      "\t\t $0",
      "\t}",
      "}",
      ""
    ],
    "description": "Adds a default constructor for it(\"\", () => {})the class that contains props as arguments"
  },
  "emptyState": {
    "prefix": "est",
    "body": [
      "state = {",
      "\t$1",
      "}",
      ""
    ],
    "description": "Creates empty state object. To be used in a constructor."
  },
  // imports
  "import React, { PureComponent }": {
    "prefix": "imrpc",
    "body": [
      "import React, { PureComponent } from \"react\"",
      ""
    ]
  },
  "import React, { PureComponent } & PropTypes": {
    "prefix": "imrpcp",
    "body": [
      "import React, { PureComponent } from \"react\"",
      "import PropTypes from \"prop-types\"",
      ""
    ]
  },
  "import React, { memo }": {
    "prefix": "imrm",
    "body": [
      "import React, { memo } from \"react\"",
      ""
    ]
  },
  "import React, { memo } & PropTypes": {
    "prefix": "imrmp",
    "body": [
      "import React, { memo } from \"react\"",
      "import PropTypes from \"prop-types\"",
      ""
    ]
  },
  "import React, {useState}": {
    "prefix": "imrs",
    "body": [
      "import React, { useState } from \"react\"",
      ""
    ]
  },
  "import React, {useState, useEffect}": {
    "prefix": "imrse",
    "body": [
      "import React, { useState, useEffect } from \"react\"",
      ""
    ]
  },
  "import React Router": {
    "prefix": "imrr",
    "body": [
      "import { BrowserRouter as Router, Route, Link } from \"react-router-dom\"",
      ""
    ]
  },
  "import redux statement": {
    "prefix": "redux",
    "body": [
      "import { connect } from \"react-redux\"",
      ""
    ]
  },
  "Import destructure": {
    "prefix": [
      "impd",
      "imd"
    ],
    "body": [
      "import { $2 } from \"$1\";"
    ],
    "description": "Import react Intl"
  },
  "Import semantic": {
    "prefix": "isem",
    "body": [
      "import { $1 } from \"semantic-ui-react\";"
    ],
    "description": "Import react Intl"
  },
  // import react
  "Import React": {
    "prefix": "rimp",
    "body": [
      "import React from \"react\";"
    ],
    "description": "Import React"
  },
  "import react hooks": {
    "prefix": "irh",
    "body": [
      "import React, { useState, useContext, useEffect, useCallback, useMemo } from \"react\";"
    ]
  },
  "import PropTypes": {
    "prefix": "ipt",
    "body": [
      "import PropTypes from \"prop-types\";"
    ]
  },
  "React intl": {
    "prefix": "impintl",
    "body": [
      "import { useIntl } from \"react-intl\";"
    ],
    "description": "Import useIntl from react-intl"
  },
  // components snippets
  "reactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React from \"react\"",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "reactFunctionalComponentWithPropTypes": {
    "prefix": "rfcpe",
    "body": [
      "import React from \"react\"",
      "import PropTypes from \"prop-types\"",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  // proptypes
  "proptypes": {
    "prefix": "pt",
    "body": [
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}"
    ]
  },
  "Export default this filename": {
    "prefix": "exdt",
    "body": [
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Export default this file name"
  },
  "Console log no semicolon": {
    "prefix": "clg",
    "body": [
      "console.log(\"${1:Obj}\", ${1:Obj})"
    ],
    "description": "Console log obj"
  },
  "Console log": {
    "prefix": "clo",
    "body": [
      "console.log(\"${1:Obj}\", ${1:Obj})"
    ],
    "description": "Console log obj"
  },
  "Console log message": {
    "prefix": "clm",
    "body": [
      "console.log(\"${1:msg}\")"
    ],
    "description": "Console log message"
  },
  "scope": {
    "prefix": "scope",
    "body": [
      "console.log(\"${1:msg}\")"
    ],
    "description": "Console log message",
  },
  // JEST
  "afterAll": {
    "body": "afterAll(() => {\n\t$0\n});",
    "description": "afterAll function is called once after all specs",
    "prefix": "jaa",
  },
  "afterEach": {
    "body": "afterEach(() => {\n\t$0\n});",
    "description": "afterEach function is called once after each spec",
    "prefix": "jae",
  },
  "beforeAll": {
    "body": "beforeAll(() => {\n\t$0\n});",
    "description": "beforeAll function is called once before all specs",
    "prefix": "jba",
  },
  "beforeEach": {
    "body": "beforeEach(() => {\n\t$0\n});",
    "description": "beforeEach function is called once before each spec",
    "prefix": "jbe",
  },
  "describe": {
    "body": "describe('${1:Name of the group}', () => {\n\t$0\n});",
    "description": "creates a describe block",
    "prefix": "jdesc",
  },
  "describe.each": {
    "body": [
      "describe.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\ttest(`returns \\${expected}`, () => {",
      "\t\t\t${4:expect(double(input)).toBe(expected);}",
      "\t\t});",
      "\t}",
      ");"
    ],
    "description": "creates a describe block with different test data sets",
    "prefix": "jdesce",
  },
  "describe.only": {
    "body": "describe.only('${1:Name of the group}', () => {\n\t$0\n});",
    "description": "creates a describe block that runs only",
    "prefix": "jdesco",
  },
  "describe.skip": {
    "body": "describe.skip('${1:Name of the group}', () => {\n\t$0\n});",
    "description": "creates a describe block that will be skipped",
    "prefix": "jdescs",
  },
  "expect": {
    "body": "expect($0)",
    "description": "expect actual value",
    "prefix": "jexp",
  },
  "expect.assertions": {
    "body": "expect.assertions($0);",
    "description": "expects the test to make the indicated number of assertions (useful for async)",
    "prefix": "jexpas",
  },
  "expect.hasAssertions": {
    "body": "expect.hasAssertions();$0",
    "description": "expects the test to make at least one assertion (useful for async)",
    "prefix": "jexpha",
  },
  "expect.rejects": {
    "body": "expect($1).rejects$0",
    "description": "expect promise rejects to",
    "prefix": "jexprj",
  },
  "expect.resolves": {
    "body": "expect($1).resolves$0",
    "description": "expect promise resolves to",
    "prefix": "jexpr",
  },
  "it": {
    "body": "it('${1:should }', () => {\n\t$0\n});",
    "description": "creates an it block",
    "prefix": "jit",
  },
  "it.each": {
    "body": [
      "it.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\t${0:expect(double(input)).toBe(expected);}",
      "\t}",
      ");"
    ],
    "description": "creates an it block with different test data sets",
    "prefix": "jite",
  },
  "it.only": {
    "body": "it.only('${1:should }', () => {\n\t$0\n});",
    "description": "creates an it block that runs only",
    "prefix": "jito",
  },
  "it.skip": {
    "body": "it.skip('${1:should }', () => {\n\t$0\n});",
    "description": "creates an it block that will be skipped",
    "prefix": "jits",
  },
  "it.todo": {
    "body": "it.todo('${1:should }');",
    "description": "creates a test placeholder",
    "prefix": "jitt",
  },
  "it:async": {
    "body": "it('${1:should }', async () => {\n\t$0\n});",
    "description": "creates an it block with async callback function",
    "prefix": "jita",
  },
  "jest.fn": {
    "body": "jest.fn($0)",
    "description": "creates jest.fn()",
    "prefix": "jjfn",
  },
  "template:cut": {
    "body": [
      "describe('${1:Name of the group}', () => {\n",
      "\tlet ${2:cut};\n",
      "\tbeforeEach(() => {\n\t\t$2 = $3;\n\t});\n",
      "\ttest('${1:should }', () => {",
      "\t\texpect($2).toBe($0);",
      "\t});\n",
      "});"
    ],
    "description": "creates a template to test a class under test",
    "prefix": "jcut",
  },
  "test": {
    "body": "test('${1:should }', () => {\n\t$0\n});",
    "description": "creates a test block",
    "prefix": "jtest",
  },
  "test.each": {
    "body": [
      "test.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\t${0:expect(double(input)).toBe(expected);}",
      "\t}",
      ");"
    ],
    "description": "creates an test block with different test data sets",
    "prefix": "jteste",
  },
  "test.each (table)": {
    "body": [
      "test.each`",
      "\t${1:input}\t| ${2:expected}",
      "\t\\${1}\t| \\${2}",
      "\t\\${2}\t| \\${4}",
      "`('${3:double($${1:input})}', ({ ${1:input}, ${2:expected} }) => {",
      "\t${0:expect(double(${1:input})).toBe(${2:expected});}",
      "});"
    ],
    "description": "creates a test block using a permutation table",
    "prefix": "jtestet",
  },
  "test.only": {
    "body": "test.only('${1:should }', () => {\n\t$0\n});",
    "description": "creates a test block  that runs only",
    "prefix": "jtesto",
  },
  "test.skip": {
    "body": "test.skip('${1:should }', () => {\n\t$0\n});",
    "description": "creates a test block that will be skipped",
    "prefix": "jtests",
  },
  "test.todo": {
    "body": "test.todo('${1:should }');",
    "description": "creates a test placeholder",
    "prefix": "jtestt",
  },
  "test:async": {
    "body": "test('${1:should }', async () => {\n\t$0\n});",
    "description": "creates an test block with async callback function",
    "prefix": "jtesta",
  },
  "toBe": {
    "body": "expect($1).toBe($0);",
    "description": "expects the first argument to be equal with the second one",
    "prefix": "jtb",
  },
  "toBeCloseTo": {
    "body": "expect($1).toBeCloseTo(${2:number}, ${3:delta});$0",
    "description": "expects the first argument to be close to the second one base on the delta",
    "prefix": "jtbct",
  },
  "toBeDefined": {
    "body": "expect($1).toBeDefined();$0",
    "description": "expects the argument is defined",
    "prefix": "jtbd",
  },
  "toBeFalsy": {
    "body": "expect($1).toBeFalsy();$0",
    "description": "expects the argument is falsy",
    "prefix": "jtbf",
  },
  "toBeGreaterThan": {
    "body": "expect($1).toBeGreaterThan($0);",
    "description": "expects the argument is greater than or equal",
    "prefix": "jtbgt",
  },
  "toBeGreaterThanOrEqual": {
    "body": "expect($1).toBeGreaterThanOrEqual($0);",
    "description": "expects the argument is greater than",
    "prefix": "jtbgte",
  },
  "toBeInstanceOf": {
    "body": "expect($1).toBeInstanceOf($0);",
    "description": "expects the argument is less than",
    "prefix": "jtbi",
  },
  "toBeLessThan": {
    "body": "expect($1).toBeLessThan($0);",
    "description": "expects the argument is less than",
    "prefix": "jtblt",
  },
  "toBeLessThanOrEqual": {
    "body": "expect($1).toBeLessThanOrEqual($0);",
    "description": "expects the argument is less than or equal",
    "prefix": "jtblte",
  },
  "toBeNull": {
    "body": "expect($1).toBeNull();$0",
    "description": "expects the argument is null",
    "prefix": "jtbn",
  },
  "toBeTruthy": {
    "body": "expect($1).toBeTruthy();$0",
    "description": "expects the argument is truthy",
    "prefix": "jtbt",
  },
  "toBeUndefined": {
    "body": "expect($1).toBeUndefined();$0",
    "description": "expects the argument is undefined",
    "prefix": "jtbu",
  },
  "toContain": {
    "body": "expect(${1:list}).toContain($0);",
    "description": "expects the list contains the item (===)",
    "prefix": "jtc",
  },
  "toContainEqual": {
    "body": "expect(${1:list}).toContainEqual($0);",
    "description": "expects the list contains the item (equals)",
    "prefix": "jtce",
  },
  "toEqual": {
    "body": "expect($1).toEqual($0);",
    "description": "expects the first argument to be equal with the second one",
    "prefix": "jte",
  },
  "toHaveBeenCalled": {
    "body": "expect($1).toHaveBeenCalled();$0",
    "description": "returns true if the spy was called",
    "prefix": "jthbc",
  },
  "toHaveBeenCalledTimes": {
    "body": "expect($1).toHaveBeenCalledTimes($0);",
    "description": "returns true if the spy has been called given times",
    "prefix": "jthbct",
  },
  "toHaveBeenCalledWith": {
    "body": "expect($1).toHaveBeenCalledWith($0);",
    "description": "returns true if the spy has been called with",
    "prefix": "jthbcw",
  },
  "toHaveBeenLastCalledWith": {
    "body": "expect($1).toHaveBeenLastCalledWith($0);",
    "description": "returns true if the spy has been last called with",
    "prefix": "jthblcw",
  },
  "toHaveLength": {
    "body": "expect($1).toHaveLength($0);",
    "description": "expects the object to have length",
    "prefix": "jthl",
  },
  "toHaveProperty": {
    "body": "expect($1).toHaveProperty(${2:keyPath}, ${3:value});$0",
    "description": "returns true if the argument matches the second object",
    "prefix": "jthp",
  },
  "toMatch": {
    "body": "expect($1).toMatch($0);",
    "description": "returns true if the argument matches the second value",
    "prefix": "jtm",
  },
  "toMatchInlineSnapshot": {
    "body": "expect($1).toMatchInlineSnapshot($0);",
    "description": "returns true if the argument matches the most recent inline snapshot",
    "prefix": "jtmis",
  },
  "toMatchObject": {
    "body": "expect($1).toMatchObject($0);",
    "description": "returns true if the argument matches the second object",
    "prefix": "jtmo",
  },
  "toMatchSnapshot": {
    "body": "expect($1).toMatchSnapshot($0);",
    "description": "returns true if the argument matches the most recent snapshot",
    "prefix": "jtms",
  },
  "toStrictEqual": {
    "body": "expect($1).toStrictEqual($0);",
    "description": "expects the first argument to be strictly equal with the second one",
    "prefix": "jtse",
  },
  "toThrow": {
    "body": "expect(() => {\n\t$0\n}).toThrow($1);",
    "description": "expects that the method will throw an error",
    "prefix": "jtt",
  },
  "toThrowError": {
    "body": "expect(() => {\n\t$0\n}).toThrowError($1);",
    "description": "expects that the method will throw an error",
    "prefix": "jtte",
  },
  "toThrowErrorMatchingInlineSnapshot": {
    "body": "expect(() => {\n\t$0\n}).toThrowErrorMatchingInlineSnapshot();",
    "description": "expects that the method will throw an error matching the inline snapshot",
    "prefix": "jttemis",
  },
  "toThrowErrorMatchingSnapshot": {
    "body": "expect(() => {\n\t$0\n}).toThrowErrorMatchingSnapshot();",
    "description": "expects that the method will throw an error mathing the snapshpot",
    "prefix": "jttems",
  },
  "export default from ": {
    "prefix": "iedf",
    "body": [
      "export { default } from '${1:location}';"
    ],
    "description": "export default from "
  },
  "Snackbar": {
    "prefix": ["enq", "snackbar", "notistack"],
    "body": [
      "enqueueSnackbar(<FormattedMessage id='${1:id}' />);"
    ],
    "description": "EnqueueSnackbar "
  },
  
  "reactClassComponent": {
    "prefix": "rcc",
    "body": "import React, { Component } from 'react';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactReduxComponent": {
    "prefix": "rrc",
    "body": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
    "description": "Creates a React component class connected to redux"
  },
  "reactReduxDispatchComponent": {
      "prefix": "rrdc",
      "body": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
      "description": "Creates a React component class connected to redux with dispatch"
  },
  "reactJustClassComponent": {
    "prefix": "rcjc",
    "body": "class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactClassComponentPropTypes": {
    "prefix": "rccp",
    "body": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with PropTypes and ES6 module system"
  },
  "reactClassComponentWithMethods": {
    "prefix": "rcfc",
    "body": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t}\n\n\tcomponentWillMount() {\n\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount() {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system"
  },
  "reactWithWebpackDefaults": {
    "prefix": "rwwd",
    "body": "class ${1:${TM_FILENAME_BASE}} extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {};\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with constructor, empty state, proptypes and export in ES6 module system without imports. (Mostly used when React, Proptypes are provided by webpack provide plugin)"
  },
  "reactPureComponent": {
    "prefix": "rpc",
    "body": "import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React pure component class with PropTypes and ES6 module system"
  },
  "reactStateless": {
    "prefix": "rsc",
    "body": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "reactStatelessProps": {
    "prefix": "rscp",
    "body": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component with PropTypes and ES6 module system"
  },
  "reactMemo": {
     "prefix": "rscm",
     "body": "import React, { memo } from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = memo(() => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});\n\nexport default ${1:${TM_FILENAME_BASE}};",
     "description": "Creates a memoized stateless React component without PropTypes and ES6 module system"
  },
  "reactMemoProps": {
     "prefix": "rscpm",
     "body": "import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = memo((props) => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n});\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
     "description": "Creates a memoized stateless React component with PropTypes and ES6 module system"
  },
  "flowStatelessComponent": {
    "prefix": "fsc",
    "body": "// @flow \nimport * as React from 'react';\ntype Props = {\n\t$0\n};\nexport const ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};",
    "description": "Creates a stateless React component with FlowTypes and ES6 module system"
  },
  "flowStatelessFunction": {
    "prefix": "fsf",
    "body": [
      "// @flow",
      "import * as React from 'react';",
      "type Props = {",
      "  $0",
      "};",
      "export function ${1:${TM_FILENAME_BASE}}(props: Props) {",
      "  return (",
      "    <div>",
      "      ",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Creates a stateless React component as a named function with FlowTypes"
  },
  "flowClassComponent": {
    "prefix": "fcc",
    "body": [
      "// @flow",
      "import * as React from 'react';",
      "type Props = {",
      "  $0",
      "};",
      "type State = {",
      "  $1",
      "};",
      "export class ${2:${TM_FILENAME_BASE}} extends React.Component<Props, State>{",
      "  render() {",
      "    return (",
      "      <div>",
      "        ",
      "      </div>",
      "    );",
      "  };",
      "};"
    ],
    "description": "Creates a React component class with FlowTypes"
  },
  "reactStatelessFunction": {
    "prefix": "rsf",
    "body": "import React from 'react';\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component as a named function without PropTypes"
  },
  "reactStatelessFunctionProps": {
    "prefix": "rsfp",
    "body": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component as a named function with PropTypes"
  },
  "reactStatelessImplicitReturn": {
    "prefix": "rsi",
    "body": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = (props) => (\n\t\t\t$0\n\t);\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props"
  },
  "classConstructor": {
    "prefix": "con",
    "body": "constructor(props) {\n\tsuper(props);\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "prefix": "conc",
    "body": "constructor(props, context) {\n\tsuper(props, context);\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments"
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": "\ncomponentWillMount() {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentRender": {
    "prefix": "ren",
    "body": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0);",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }});\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "state",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "bindThis": {
    "prefix": "bnd",
    "body": "this.$1 = this.$1.bind(this);$0",
    "description": "Binds the this of a method. To be used inside a constructor"
  },
  "propTypes": {
    "prefix": "rpt",
    "body": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n};",
    "description": "Creates empty propTypes declaration"
  },
  "defaultProps": {
    "prefix": "rdp",
    "body": "${1:$TM_FILENAME_BASE}.defaultProps = {\n\t$2\n};",
    "description": "Creates empty defaultProps declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeSymbol": {
    "prefix": "ptsm",
    "body": "PropTypes.symbol,",
    "description": "Symbol prop type"
  },
  "propTypeSymbolRequired": {
    "prefix": "ptsmr",
    "body": "PropTypes.symbol.isRequired,",
    "description": "Symbol prop type required"
  },
  "propTypeAny": {
    "prefix": "ptan",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "propTypeAnyRequired": {
    "prefix": "ptanr",
    "body": "PropTypes.any.isRequired,",
    "description": "Any prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": "getSnapshotBeforeUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values"
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": "static getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props."
  },
  "componentDidCatch": {
    "prefix": "cdc",
    "body": "componentDidCatch(error, info) {\n\t$0\n}\n",
    "description": "Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them."
  },
  "dispatchRedux": {
    "prefix": "disp",
    "body": "function mapDispatchToProps(dispatch) {\n\treturn {\n\t}\n\n}",
    "description": "Adds the redux mapDispatchToProps function"
  }  
}